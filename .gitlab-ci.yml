include:
  - template: Terraform/Base.gitlab-ci.yml
  - template: Jobs/SAST-IaC.gitlab-ci.yml

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/lab1/iac/terraform/vpg
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_ENVIRONMENT_NAME}

stages:
  - validate
  - test
  - plan
  - approve
  - apply
  - approve-destroy
  - destroy

fmt:
  extends: .terraform:fmt
  needs: []
  stage: validate
  script:
    - cd ${TF_ROOT}
    - terraform fmt -check -recursive

validate:
  extends: .terraform:validate
  needs: []
  stage: validate
  script:
    - cd ${TF_ROOT}
    - terraform init
    - terraform validate

plan:
  extends: .terraform:build
  stage: plan
  script:
    - cd ${TF_ROOT}
    - terraform init
    - terraform plan -out=plan.tfplan
  artifacts:
    paths:
      - ${TF_ROOT}/plan.tfplan
    expire_in: 1 day
  environment:
    name: $TF_STATE_NAME
    action: prepare

approve:
  stage: approve
  script:
    - echo "Waiting for approval..."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
    - when: never
  allow_failure: false

apply:
  extends: .terraform:deploy
  stage: apply
  script:
    - cd ${TF_ROOT}
    - terraform init
    - terraform apply -auto-approve plan.tfplan
  dependencies:
    - plan
  needs:
    - plan
    - approve
  environment:
    name: $TF_STATE_NAME
    action: start
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: never

approve-destroy:
  stage: approve-destroy
  script:
    - echo "Waiting for destroy approval..."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
    - when: never
  allow_failure: false

destroy:
  extends: .terraform:destroy
  stage: destroy
  script:
    - cd ${TF_ROOT}
    - terraform init
    - terraform destroy -auto-approve
  environment:
    name: $TF_STATE_NAME
    action: stop
  needs:
    - approve-destroy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - when: never
